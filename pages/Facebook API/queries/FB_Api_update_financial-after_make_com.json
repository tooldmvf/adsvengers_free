{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "after_make_com",
    "fullyQualifiedName": "FB_Api_update_financial.after_make_com",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Facebook API",
    "collectionId": "Facebook API_FB_Api_update_financial",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  storeValue('myProgress2', 0);\n  storeValue('myProgress3', 0);\n  var progress2 = 0;\n  var progress3 = 0;\n  var spentCur = 0;\n  const res = await get_campaigns.run();\n  const totalRun = await Object.keys(res).length;\n  for (const i in res) {\n    const res2 = await fb_campaign_insight.run({\n      campaign_id: res[i].campaign_id,\n      date_run: res[i].financial_date\n    });\n    if (res2.data.length > 0) {\n      spentCur = res2.data[0].spend;\n      if (res2.data[0].account_currency != 'EUR') {\n        await fetch(`https://api.exchangerate-api.com/v4/latest/${res2.data[0].account_currency}`).then(response => {\n          return response.json();\n        }).then(data => {\n          let rate = data.rates['EUR'];\n          spentCur = rate * res2.data[0].spend;\n        });\n      }\n      await insert_raw_user_fb_fin_data.run({\n        fk_user_id: res[i].fk_user_id,\n        fk_bm_id: res[i].fk_bm_id,\n        fk_ad_account_id: res[i].fk_ad_account_id,\n        financial_date: res[i].financial_date,\n        campaign_id: res[i].campaign_id,\n        campaign_name: res[i].campaign_name,\n        amount_spent: spentCur,\n        campaign_offer_id: res[i].campaign_offer_id,\n        spent_rate_fees: res[i].spent_rate_fees,\n        off_cat_short: res[i].off_cat_short,\n        net_name_short: res[i].net_name_short\n      });\n    }\n    progress2++;\n    await storeValue('myProgress2', progress2 / totalRun * 100);\n  }\n  const res3 = await get_user_fin_pre_update.run();\n  const totalRun2 = await Object.keys(res3).length;\n  for (const x in res3) {\n    let spent_w_fees = await res3[x].amount_spent + res3[x].amount_spent / 100 * res3[x].spent_rate_fees;\n    await update_user_financial.run({\n      fk_offer_id: res3[x].fk_offer_id,\n      financial_date: res3[x].financial_date,\n      fk_user_network_id: res3[x].fk_user_network_id,\n      fk_user_id: res3[x].fk_user_id,\n      spent_rate_fees: res3[x].spent_rate_fees,\n      amount_spent: res3[x].fb_spent,\n      amount_spent_plus_fee: spent_w_fees\n    });\n    await progress3++;\n    await storeValue('myProgress3', progress3 / totalRun2 * 100);\n  }\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  storeValue('myProgress2', 0);\n  storeValue('myProgress3', 0);\n  var progress2 = 0;\n  var progress3 = 0;\n  var spentCur = 0;\n  const res = await get_campaigns.run();\n  const totalRun = await Object.keys(res).length;\n  for (const i in res) {\n    const res2 = await fb_campaign_insight.run({\n      campaign_id: res[i].campaign_id,\n      date_run: res[i].financial_date\n    });\n    if (res2.data.length > 0) {\n      spentCur = res2.data[0].spend;\n      if (res2.data[0].account_currency != 'EUR') {\n        await fetch(`https://api.exchangerate-api.com/v4/latest/${res2.data[0].account_currency}`).then(response => {\n          return response.json();\n        }).then(data => {\n          let rate = data.rates['EUR'];\n          spentCur = rate * res2.data[0].spend;\n        });\n      }\n      await insert_raw_user_fb_fin_data.run({\n        fk_user_id: res[i].fk_user_id,\n        fk_bm_id: res[i].fk_bm_id,\n        fk_ad_account_id: res[i].fk_ad_account_id,\n        financial_date: res[i].financial_date,\n        campaign_id: res[i].campaign_id,\n        campaign_name: res[i].campaign_name,\n        amount_spent: spentCur,\n        campaign_offer_id: res[i].campaign_offer_id,\n        spent_rate_fees: res[i].spent_rate_fees,\n        off_cat_short: res[i].off_cat_short,\n        net_name_short: res[i].net_name_short\n      });\n    }\n    progress2++;\n    await storeValue('myProgress2', progress2 / totalRun * 100);\n  }\n  const res3 = await get_user_fin_pre_update.run();\n  const totalRun2 = await Object.keys(res3).length;\n  for (const x in res3) {\n    let spent_w_fees = await res3[x].amount_spent + res3[x].amount_spent / 100 * res3[x].spent_rate_fees;\n    await update_user_financial.run({\n      fk_offer_id: res3[x].fk_offer_id,\n      financial_date: res3[x].financial_date,\n      fk_user_network_id: res3[x].fk_user_network_id,\n      fk_user_id: res3[x].fk_user_id,\n      spent_rate_fees: res3[x].spent_rate_fees,\n      amount_spent: res3[x].fb_spent,\n      amount_spent_plus_fee: spent_w_fees\n    });\n    await progress3++;\n    await storeValue('myProgress3', progress3 / totalRun2 * 100);\n  }\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Facebook API_FB_Api_update_financial.after_make_com",
  "deleted": false,
  "gitSyncId": "63c3151532584b547fffe91b_63ce5e86f0df7a5c0ff1968c"
}