{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "insert_ai20_offer",
    "fullyQualifiedName": "wf_offers.insert_ai20_offer",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Campaign Name Builder Utility",
    "collectionId": "Campaign Name Builder Utility_wf_offers",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  const object = await get_ai20_api_key.run();\n  const res = await get_ai20_offers.run({\n    api_key: object[0].user_api_key\n  });\n  const res2 = JSON.parse(res).status;\n  var groupByArr = function (xs, key1, key2) {\n    return xs.reduce(function (rv, x) {\n      (rv[x[key1] + ',' + x[key2]] = rv[x[key1] + ',' + x[key2]] || []).push(x);\n      return rv;\n    }, {});\n  };\n  const result = groupByArr(res2, 'off_id', 'off_name');\n  const arr_off_id = Object.keys(result);\n  for (const i in arr_off_id) {\n    let cat_short = 'G';\n    if (result[arr_off_id[i]][0].off_categories[0].name.toLowerCase().includes('nutra') || result[arr_off_id[i]][0].off_categories[0].name.toLowerCase().includes('cosmetic')) cat_short = 'N';\n    if (result[arr_off_id[i]][0].off_categories[0].name.toLowerCase().includes('cloth') || result[arr_off_id[i]][0].off_categories[0].name.toLowerCase().includes('shoe')) cat_short = 'A';\n    await insert_offer_network.run({\n      offer_id_net: arr_off_id[i].split(',')[0],\n      offer_name_net: arr_off_id[i].split(',')[1],\n      fk_network_id: object[0].network_id,\n      off_category_net: '',\n      off_cat_short: cat_short,\n      payout: result[arr_off_id[i]][0].off_payout\n    });\n  }\n  await get_offer_net.run();\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  const object = await get_ai20_api_key.run();\n  const res = await get_ai20_offers.run({\n    api_key: object[0].user_api_key\n  });\n  const res2 = JSON.parse(res).status;\n  var groupByArr = function (xs, key1, key2) {\n    return xs.reduce(function (rv, x) {\n      (rv[x[key1] + ',' + x[key2]] = rv[x[key1] + ',' + x[key2]] || []).push(x);\n      return rv;\n    }, {});\n  };\n  const result = groupByArr(res2, 'off_id', 'off_name');\n  const arr_off_id = Object.keys(result);\n  for (const i in arr_off_id) {\n    let cat_short = 'G';\n    if (result[arr_off_id[i]][0].off_categories[0].name.toLowerCase().includes('nutra') || result[arr_off_id[i]][0].off_categories[0].name.toLowerCase().includes('cosmetic')) cat_short = 'N';\n    if (result[arr_off_id[i]][0].off_categories[0].name.toLowerCase().includes('cloth') || result[arr_off_id[i]][0].off_categories[0].name.toLowerCase().includes('shoe')) cat_short = 'A';\n    await insert_offer_network.run({\n      offer_id_net: arr_off_id[i].split(',')[0],\n      offer_name_net: arr_off_id[i].split(',')[1],\n      fk_network_id: object[0].network_id,\n      off_category_net: '',\n      off_cat_short: cat_short,\n      payout: result[arr_off_id[i]][0].off_payout\n    });\n  }\n  await get_offer_net.run();\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Campaign Name Builder Utility_wf_offers.insert_ai20_offer",
  "deleted": false,
  "gitSyncId": "63c3151532584b547fffe91b_63cbbab040c6ec5d3546a93e"
}