{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "duplicate_date",
    "fullyQualifiedName": "js_duplicate_date.duplicate_date",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Day by Day",
    "collectionId": "Day by Day_js_duplicate_date",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  const results = SubTable.updatedRows ? SubTable.updatedRows.map(row => {\n    return row.allFields;\n  }) : SubTable.updatedRow;\n  const key_to_del = ['to_char', 'Approved Conv.', 'Rejected Conv.', 'Pending Conv.', 'Rejected Rate', 'customColumn2', 'roi', 'Pending Rev.', 'Approved Rev.', 'Rejected Rev.', 'network_other_name', 'offer_name', 'off_cat_name', 'offer_payout', 'user_aff_id', 'Date', 'ts_name', 'concat', 'fk_network_id', 'mediabuyer', 'Approv. Profit', 'Approv. ROI', 'Tot Profit', 'Tot ROI'];\n  var new_array = [];\n  var myNum = 0;\n  if (results instanceof Array) {\n    for (const element of results) {\n      key_to_del.forEach(i => {\n        delete element[i];\n      });\n      element[\"financial_date\"] = DateToDuplicate.selectedDate;\n      if (typeof element.amount_spent == 'string') myNum = Number(element.amount_spent.replace('€', '')); else myNum = Number(element.amount_spent);\n      element[\"amount_spent\"] = myNum;\n      element[\"amount_spent_plus_fee\"] = myNum + myNum / element[\"spent_rate_fees\"];\n      if (typeof element.amount_revenue == 'string') myNum = Number(element.amount_revenue.replace('€', '')); else myNum = Number(element.amount_revenue);\n      element[\"amount_revenue_approved\"] = myNum;\n      element[\"amount_revenue\"] = myNum;\n      element[\"conversions_approved\"] = element.amount_conversion;\n      new_array.push(element);\n    }\n  } else {\n    var result = Object.assign({}, results);\n    key_to_del.forEach(i => {\n      delete result[i];\n    });\n    result[\"financial_date\"] = DateToDuplicate.selectedDate;\n    if (typeof result.amount_spent == 'string') myNum = Number(result.amount_spent.replace('€', '')); else myNum = Number(result.amount_spent);\n    result[\"amount_spent\"] = myNum;\n    result[\"amount_spent_plus_fee\"] = myNum + myNum / result[\"spent_rate_fees\"];\n    if (typeof result.amount_revenue == 'string') myNum = Number(result.amount_revenue.replace('€', '')); else myNum = Number(result.amount_revenue);\n    result[\"amount_revenue_approved\"] = myNum;\n    result[\"amount_revenue\"] = myNum;\n    result[\"conversions_approved\"] = result.amount_conversion;\n    new_array.push(result);\n  }\n  await storeValue('new_array', new_array);\n  await clone_day.run();\n  await TableTotal.tblSummary();\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "clientSideExecution": true,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  const results = SubTable.updatedRows ? SubTable.updatedRows.map(row => {\n    return row.allFields;\n  }) : SubTable.updatedRow;\n  const key_to_del = ['to_char', 'Approved Conv.', 'Rejected Conv.', 'Pending Conv.', 'Rejected Rate', 'customColumn2', 'roi', 'Pending Rev.', 'Approved Rev.', 'Rejected Rev.', 'network_other_name', 'offer_name', 'off_cat_name', 'offer_payout', 'user_aff_id', 'Date', 'ts_name', 'concat', 'fk_network_id', 'mediabuyer', 'Approv. Profit', 'Approv. ROI', 'Tot Profit', 'Tot ROI'];\n  var new_array = [];\n  var myNum = 0;\n  if (results instanceof Array) {\n    for (const element of results) {\n      key_to_del.forEach(i => {\n        delete element[i];\n      });\n      element[\"financial_date\"] = DateToDuplicate.selectedDate;\n      if (typeof element.amount_spent == 'string') myNum = Number(element.amount_spent.replace('€', '')); else myNum = Number(element.amount_spent);\n      element[\"amount_spent\"] = myNum;\n      element[\"amount_spent_plus_fee\"] = myNum + myNum / element[\"spent_rate_fees\"];\n      if (typeof element.amount_revenue == 'string') myNum = Number(element.amount_revenue.replace('€', '')); else myNum = Number(element.amount_revenue);\n      element[\"amount_revenue_approved\"] = myNum;\n      element[\"amount_revenue\"] = myNum;\n      element[\"conversions_approved\"] = element.amount_conversion;\n      new_array.push(element);\n    }\n  } else {\n    var result = Object.assign({}, results);\n    key_to_del.forEach(i => {\n      delete result[i];\n    });\n    result[\"financial_date\"] = DateToDuplicate.selectedDate;\n    if (typeof result.amount_spent == 'string') myNum = Number(result.amount_spent.replace('€', '')); else myNum = Number(result.amount_spent);\n    result[\"amount_spent\"] = myNum;\n    result[\"amount_spent_plus_fee\"] = myNum + myNum / result[\"spent_rate_fees\"];\n    if (typeof result.amount_revenue == 'string') myNum = Number(result.amount_revenue.replace('€', '')); else myNum = Number(result.amount_revenue);\n    result[\"amount_revenue_approved\"] = myNum;\n    result[\"amount_revenue\"] = myNum;\n    result[\"conversions_approved\"] = result.amount_conversion;\n    new_array.push(result);\n  }\n  await storeValue('new_array', new_array);\n  await clone_day.run();\n  await TableTotal.tblSummary();\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Day by Day_js_duplicate_date.duplicate_date",
  "deleted": false,
  "gitSyncId": "63936c0b4b95806da2da5de7_63b9998160108a1256294fd2"
}